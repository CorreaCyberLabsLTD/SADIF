name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - main

jobs:
  compute-image-hash:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Calculate Docker Image SHA
        run: |
          echo "DOCKER_IMAGE_SHA=$(sha1sum Dockerfile poetry.lock pyproject.toml | sha1sum | cut -c 1-12)" >> $GITHUB_ENV

  lint-and-test:
    needs: compute-image-hash
    runs-on: ubuntu-latest
    container:
      image: ${{ env.CI_REGISTRY_IMAGE }}/ci:${{ env.DOCKER_IMAGE_SHA }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          pip install poetry
          poetry install
      - name: Lint and Test
        run: |
          poetry run poe lint
          poetry run poe test
      - name: Collect coverage
        run: |
          poetry run pytest --cov=./ --cov-report=xml
        continue-on-error: true
      - uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage.xml

  build-and-publish:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    container:
      image: ${{ env.CI_REGISTRY_IMAGE }}/ci:${{ env.DOCKER_IMAGE_SHA }}
    steps:
      - uses: actions/checkout@v2
      - name: Build and Publish
        run: |
          poetry build
          poetry publish

  prepare-release-notes:
    needs: build-and-publish
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v2
      - name: Prepare Release Notes
        run: |
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" \
               | jq -r '.body' > RELEASE_NOTES.md
      - uses: actions/upload-artifact@v2
        with:
          name: release-notes
          path: RELEASE_NOTES.md

  create-release:
    needs: prepare-release-notes
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: release-notes
          path: .
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body_path: RELEASE_NOTES.md
